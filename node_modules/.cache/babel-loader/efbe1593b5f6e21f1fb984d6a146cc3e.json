{"ast":null,"code":"import { GET_LOGS, SET_LOADING, LOGS_ERROR, ADD_LOGS, DELETE_LOGS } from '../actions/types';\nconst intialState = {\n  logs: null,\n  current: null,\n  loading: false,\n  error: null\n};\nexport default ((state = intialState, action) => {\n  switch (action.type) {\n    case GET_LOGS:\n      return { ...state,\n        logs: action.payload,\n        loading: false\n      };\n\n    case ADD_LOGS:\n      return { ...state,\n        //since state is immutable, cant alter it, just use spread\n        // operators and append log to the state\n        logs: [...state.logs, action.payload],\n        loading: false\n      };\n\n    case DELETE_LOGS:\n      return { ...state,\n        logs: state.logs.filter(log => log.id !== action.payload)\n      };\n\n    case SET_LOADING:\n      return { ...state,\n        loading: true\n      };\n\n    case LOGS_ERROR:\n      console.error(action.payload);\n      return { ...state,\n        error: action.payload\n      };\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/namanpratyush/Documents/UI/REACT/MARCH-20-2020/Udemy/BradCourse/REDUX/brad-redux/src/reducers/logReducer.js"],"names":["GET_LOGS","SET_LOADING","LOGS_ERROR","ADD_LOGS","DELETE_LOGS","intialState","logs","current","loading","error","state","action","type","payload","filter","log","id","console"],"mappings":"AAAA,SACEA,QADF,EAEEC,WAFF,EAGEC,UAHF,EAIEC,QAJF,EAKEC,WALF,QAMO,kBANP;AAQA,MAAMC,WAAW,GAAG;AAClBC,EAAAA,IAAI,EAAE,IADY;AAElBC,EAAAA,OAAO,EAAE,IAFS;AAGlBC,EAAAA,OAAO,EAAE,KAHS;AAIlBC,EAAAA,KAAK,EAAE;AAJW,CAApB;AAOA,gBAAe,CAACC,KAAK,GAAGL,WAAT,EAAsBM,MAAtB,KAAiC;AAC9C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKZ,QAAL;AACE,aAAO,EACL,GAAGU,KADE;AAELJ,QAAAA,IAAI,EAAEK,MAAM,CAACE,OAFR;AAGLL,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAKF,SAAKL,QAAL;AACE,aAAO,EACL,GAAGO,KADE;AAEL;AACA;AACAJ,QAAAA,IAAI,EAAE,CAAC,GAAGI,KAAK,CAACJ,IAAV,EAAgBK,MAAM,CAACE,OAAvB,CAJD;AAKLL,QAAAA,OAAO,EAAE;AALJ,OAAP;;AAOF,SAAKJ,WAAL;AACE,aAAO,EACL,GAAGM,KADE;AAELJ,QAAAA,IAAI,EAAEI,KAAK,CAACJ,IAAN,CAAWQ,MAAX,CAAmBC,GAAD,IAASA,GAAG,CAACC,EAAJ,KAAWL,MAAM,CAACE,OAA7C;AAFD,OAAP;;AAIF,SAAKZ,WAAL;AACE,aAAO,EACL,GAAGS,KADE;AAELF,QAAAA,OAAO,EAAE;AAFJ,OAAP;;AAIF,SAAKN,UAAL;AACEe,MAAAA,OAAO,CAACR,KAAR,CAAcE,MAAM,CAACE,OAArB;AACA,aAAO,EACL,GAAGH,KADE;AAELD,QAAAA,KAAK,EAAEE,MAAM,CAACE;AAFT,OAAP;;AAIF;AACE,aAAOH,KAAP;AAhCJ;AAkCD,CAnCD","sourcesContent":["import {\n  GET_LOGS,\n  SET_LOADING,\n  LOGS_ERROR,\n  ADD_LOGS,\n  DELETE_LOGS,\n} from '../actions/types';\n\nconst intialState = {\n  logs: null,\n  current: null,\n  loading: false,\n  error: null,\n};\n\nexport default (state = intialState, action) => {\n  switch (action.type) {\n    case GET_LOGS:\n      return {\n        ...state,\n        logs: action.payload,\n        loading: false,\n      };\n    case ADD_LOGS:\n      return {\n        ...state,\n        //since state is immutable, cant alter it, just use spread\n        // operators and append log to the state\n        logs: [...state.logs, action.payload],\n        loading: false,\n      };\n    case DELETE_LOGS:\n      return {\n        ...state,\n        logs: state.logs.filter((log) => log.id !== action.payload),\n      };\n    case SET_LOADING:\n      return {\n        ...state,\n        loading: true,\n      };\n    case LOGS_ERROR:\n      console.error(action.payload);\n      return {\n        ...state,\n        error: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}